{
  "stats": {
    "suites": 2,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2021-08-11T14:20:30.198Z",
    "end": "2021-08-11T14:20:40.370Z",
    "duration": 10172,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5b175fba-3eb2-4c72-aa09-0db20031a6f0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: create can-standard-simulation and can-websocket in \"{root}\"",
          "fullTitle": "\"before all\" hook: create can-standard-simulation and can-websocket in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "it('should create can-simulation-instance', (done) => {\n    const deletePromise = axios.delete(`http://${publisher_base_url}:${standard_simulation_port}`, {data: {uuid: instance}})\n        .then((res) => {\n            // console.log(res)\n        });\n    const postPromise = axios.post(`http://${publisher_base_url}:${standard_simulation_port}`, {\n        uuid: instance,\n        type: \"CAN-SIM\",\n        dst_phy_id: \"can2\",\n        file_path: \"/root/simulations/testproj/cansim.simod\"\n    }).then((response) => {\n        console.log(response.data);\n    })\n    const getPromise = axios.get(`http://${publisher_base_url}:${standard_simulation_port}`)\n        .then(res => {\n            console.log('----------------')\n            // console.log(res.data);\n        });\n    Promise.allSettled([deletePromise, postPromise, getPromise])\n        .then((results) => {\n            // console.log(results);\n            done();\n        })\n});\nit('should start instance', function () {\n    const getInstancePromise = axios.get(`http://${publisher_base_url}:${standard_simulation_port}/modules/${instance}/status`)\n        .then(res => {\n            // console.log(res.data)\n        });\n    const postInstancePromise = axios.post(`http://${publisher_base_url}:${standard_simulation_port}/modules/${instance}/start`)\n        .then(res => {\n            // console.log(res.data);\n        });\n    Promise.allSettled([getInstancePromise, postInstancePromise])\n        .then((results) => {\n            console.log(results);\n            done()\n        })\n});\nit('should activate msgId', (done) => {\n    const getActivatePromise = axios.get(`http://${publisher_base_url}:${standard_simulation_port}/modules/${instance}/activate/${msgId}`)\n        .then(res => {\n            console.log('*************************')\n            console.log(res.data);\n        });\n    const postActivatePromise = axios.post(`http://${publisher_base_url}:${standard_simulation_port}/modules/${instance}/activate/${msgId}`)\n        .then(res => {\n            console.log(res.data);\n        });\n    Promise.allSettled([getActivatePromise, postActivatePromise])\n        .then((results) => {\n            console.log(results);\n            done();\n        })\n});\nit('should create can-websocket', async () => {\n    const resGetConverter = await toolkit.getConverter();\n    // console.log(resGetConverter)\n    session = await toolkit.startSession();\n    // console.log(session)\n    const tracingChannel = await session.getTracingChannel();\n    // console.log(tracingChannel)\n    const addChannel = await session.addTracingChannel({\n        bus: 'ipdu',\n        portType: 'can',\n    }, ['default-can']);\n    //\n    // await session.subscribePDU(() => {\n    //     return true\n    // }, (pdus) => {\n    //     pdus.forEach(ele => {\n    //         if (ele.parsed) {\n    //             // console.dir(ele, {depth: null});\n    //         }\n    //     })\n    // });\n    // await new Promise((res) => {\n    //     setTimeout(res, 2000)\n    // });\n    //\n    // toolkit.stopSession(session);\n    // done();\n    // await toolkit.deleteConverter(converterKey);\n})",
          "err": {},
          "uuid": "1747defb-b583-47dc-a216-b94f14437f11",
          "parentUUID": "5b175fba-3eb2-4c72-aa09-0db20031a6f0",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: close all item in \"{root}\"",
          "fullTitle": "\"after all\" hook: close all item in \"{root}\"",
          "timedOut": false,
          "duration": 17,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "toolkit.stopSession(session);\naxios.post(`http://${publisher_base_url}:${standard_simulation_port}/modules/${instance}/stop`)\n    .then(res => {\n        console.log(res.data);\n        done();\n    });",
          "err": {},
          "uuid": "12b8cf92-7569-4c98-8af7-045a831b595f",
          "parentUUID": "5b175fba-3eb2-4c72-aa09-0db20031a6f0",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [
        {
          "title": "should create can-simulation-instance",
          "fullTitle": "should create can-simulation-instance",
          "timedOut": false,
          "duration": 50,
          "state": "passed",
          "speed": "medium",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const deletePromise = axios.delete(`http://${publisher_base_url}:${standard_simulation_port}`, {data: {uuid: instance}})\n    .then((res) => {\n        // console.log(res)\n    });\nconst postPromise = axios.post(`http://${publisher_base_url}:${standard_simulation_port}`, {\n    uuid: instance,\n    type: \"CAN-SIM\",\n    dst_phy_id: \"can2\",\n    file_path: \"/root/simulations/testproj/cansim.simod\"\n}).then((response) => {\n    console.log(response.data);\n})\nconst getPromise = axios.get(`http://${publisher_base_url}:${standard_simulation_port}`)\n    .then(res => {\n        console.log('----------------')\n        // console.log(res.data);\n    });\nPromise.allSettled([deletePromise, postPromise, getPromise])\n    .then((results) => {\n        // console.log(results);\n        done();\n    })",
          "err": {},
          "uuid": "1760d540-09da-416e-8e2b-2cbb3619dc8a",
          "parentUUID": "5b175fba-3eb2-4c72-aa09-0db20031a6f0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should start instance",
          "fullTitle": "should start instance",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const getInstancePromise = axios.get(`http://${publisher_base_url}:${standard_simulation_port}/modules/${instance}/status`)\n    .then(res => {\n        // console.log(res.data)\n    });\nconst postInstancePromise = axios.post(`http://${publisher_base_url}:${standard_simulation_port}/modules/${instance}/start`)\n    .then(res => {\n        // console.log(res.data);\n    });\nPromise.allSettled([getInstancePromise, postInstancePromise])\n    .then((results) => {\n        console.log(results);\n        done()\n    })",
          "err": {},
          "uuid": "c833243c-e1cb-46fc-a689-1db5df0b56fc",
          "parentUUID": "5b175fba-3eb2-4c72-aa09-0db20031a6f0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should activate msgId",
          "fullTitle": "should activate msgId",
          "timedOut": false,
          "duration": 21,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const getActivatePromise = axios.get(`http://${publisher_base_url}:${standard_simulation_port}/modules/${instance}/activate/${msgId}`)\n    .then(res => {\n        console.log('*************************')\n        console.log(res.data);\n    });\nconst postActivatePromise = axios.post(`http://${publisher_base_url}:${standard_simulation_port}/modules/${instance}/activate/${msgId}`)\n    .then(res => {\n        console.log(res.data);\n    });\nPromise.allSettled([getActivatePromise, postActivatePromise])\n    .then((results) => {\n        console.log(results);\n        done();\n    })",
          "err": {},
          "uuid": "1d9d0b5c-d736-4d6e-bc37-d11e48dab639",
          "parentUUID": "5b175fba-3eb2-4c72-aa09-0db20031a6f0",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should create can-websocket",
          "fullTitle": "should create can-websocket",
          "timedOut": false,
          "duration": 29,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const resGetConverter = await toolkit.getConverter();\n// console.log(resGetConverter)\nsession = await toolkit.startSession();\n// console.log(session)\nconst tracingChannel = await session.getTracingChannel();\n// console.log(tracingChannel)\nconst addChannel = await session.addTracingChannel({\n    bus: 'ipdu',\n    portType: 'can',\n}, ['default-can']);\n//\n// await session.subscribePDU(() => {\n//     return true\n// }, (pdus) => {\n//     pdus.forEach(ele => {\n//         if (ele.parsed) {\n//             // console.dir(ele, {depth: null});\n//         }\n//     })\n// });\n// await new Promise((res) => {\n//     setTimeout(res, 2000)\n// });\n//\n// toolkit.stopSession(session);\n// done();\n// await toolkit.deleteConverter(converterKey);",
          "err": {},
          "uuid": "7e667f7b-1526-4674-bedd-5e6a348f58a6",
          "parentUUID": "5b175fba-3eb2-4c72-aa09-0db20031a6f0",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "3aa9e68b-6cee-4c4d-9459-d8335a2ed652",
          "title": "CAN-Trace test",
          "fullFile": "C:\\zd-tool\\Testcase-ZDBOX2\\test\\can_trace_test.js",
          "file": "\\test\\can_trace_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4e7f670b-52c5-4330-8f57-72490abd7910",
              "title": "verify can-trace",
              "fullFile": "C:\\zd-tool\\Testcase-ZDBOX2\\test\\can_trace_test.js",
              "file": "\\test\\can_trace_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should verify id",
                  "fullTitle": "CAN-Trace test verify can-trace should verify id",
                  "timedOut": false,
                  "duration": 5017,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await session.subscribePDU(() => {\n    return true\n}, (pdus) => {\n    pdus.forEach(ele => {\n        if (ele.parsed) {\n            // console.dir(ele, {depth: null});\n            // console.log(ele.id);\n            expect(ele.id).to.be.equal(960);\n        }\n    });\n});\nawait new Promise((res) => {\n    setTimeout(res, 5000)\n});",
                  "err": {},
                  "uuid": "3d17033b-2903-4e30-a762-4a522dce51c0",
                  "parentUUID": "4e7f670b-52c5-4330-8f57-72490abd7910",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify cycle",
                  "fullTitle": "CAN-Trace test verify can-trace should verify cycle",
                  "timedOut": false,
                  "duration": 5025,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await axios.put(`http://${publisher_base_url}:${standard_simulation_port}/modules/${instance}/trigger/cycle/${msgId}`,\n    {\n        \"time\": 10\n    }).then(res => {\n    expect(res.data.time).to.be.equal(10);\n    console.log('---------------------')\n})\nawait axios.get(`http://${publisher_base_url}:${standard_simulation_port}/modules/${instance}/trigger/cycle/${msgId}`)\n    .then(res => {\n        expect(res.data.time).to.be.equal(10);\n    })\nawait session.subscribePDU(() => {\n    return true\n}, (pdus) => {\n    pdus.forEach(ele => {\n        if (ele.parsed) {\n            // console.dir(ele, {depth: null});\n            // console.log(ele.id);\n            expect(ele.id).to.be.equal(960);\n        }\n    });\n});\nawait new Promise((res) => {\n    setTimeout(res, 5000)\n});",
                  "err": {},
                  "uuid": "9e52094d-9b44-4e9a-8fba-51c8e772a89e",
                  "parentUUID": "4e7f670b-52c5-4330-8f57-72490abd7910",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should test3",
                  "fullTitle": "CAN-Trace test verify can-trace should test3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "console.log('test3')",
                  "err": {},
                  "uuid": "5b1b4c9a-e60c-4532-b3d8-a41db3bd5688",
                  "parentUUID": "4e7f670b-52c5-4330-8f57-72490abd7910",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should test4",
                  "fullTitle": "CAN-Trace test verify can-trace should test4",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "console.log('test4')",
                  "err": {},
                  "uuid": "9670cba4-59a7-4147-821c-461c8f203524",
                  "parentUUID": "4e7f670b-52c5-4330-8f57-72490abd7910",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d17033b-2903-4e30-a762-4a522dce51c0",
                "9e52094d-9b44-4e9a-8fba-51c8e772a89e",
                "5b1b4c9a-e60c-4532-b3d8-a41db3bd5688",
                "9670cba4-59a7-4147-821c-461c8f203524"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10042,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [
        "1760d540-09da-416e-8e2b-2cbb3619dc8a",
        "c833243c-e1cb-46fc-a689-1db5df0b56fc",
        "1d9d0b5c-d736-4d6e-bc37-d11e48dab639",
        "7e667f7b-1526-4674-bedd-5e6a348f58a6"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 100,
      "root": true,
      "rootEmpty": false,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}