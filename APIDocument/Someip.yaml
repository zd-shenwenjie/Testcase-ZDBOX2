openapi: 3.0.0
info:
  title: Someip
  version: '1.0'
  description: ''
servers:
  - url: 'http://127.0.0.1:5001'
    description: ''
paths:
  /instance:
    get:
      summary: Get all the simulation instances
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNewSomeipResponse'
              examples:
                example-1:
                  value:
                    code: 0
                    message: string
                    data:
                      - id: 0
                        name: string
                        version: string
                        phy_id: 0
                        vlan: 0
                        role: string
                        server_ip: string
                        server_mask: 0
                        client_ip: string
                        client_id: 0
                        protocol_version: 0
                        interface_version: 0
                        bind_generic_function: true
                        applications: {}
                        service_discovery:
                          enable: true
                          protocol: string
                          multicast_ip: string
                          multicast_port: 0
                          initial_delay_min: 0
                          initial_delay_max: 0
                          ttl: 0
      operationId: get-instance
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
    post:
      summary: Create someip server/client instance
      operationId: post-instance
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseHttpResponse'
              examples:
                sever:
                  value:
                    code: 200
                    message: load instances successed.
                    data: someip-server_1.0.0_1
                client:
                  value:
                    code: 0
                    message: string
                    data: string
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                id:
                  type: number
                name:
                  type: string
                  minLength: 1
                version:
                  type: string
                  minLength: 1
                phy_id:
                  type: number
                vlan:
                  type: number
                role:
                  type: string
                  minLength: 1
                server_ip:
                  type: string
                  minLength: 1
                server_mask:
                  type: number
                client_ip:
                  type: string
                  minLength: 1
                client_mask:
                  type: number
                client_id:
                  type: number
                protocol_version:
                  type: number
                interface_version:
                  type: number
                applications:
                  type: object
                  properties:
                    '29180':
                      type: object
                      properties:
                        protocol:
                          type: string
                          minLength: 1
                        bind_generic_function:
                          type: boolean
                        spec_files:
                          type: object
                          properties:
                            '300':
                              type: string
                              minLength: 1
                            '24603':
                              type: string
                              minLength: 1
                            '24604':
                              type: string
                              minLength: 1
                            '24747':
                              type: string
                              minLength: 1
                            '24864':
                              type: string
                              minLength: 1
                            '24884':
                              type: string
                              minLength: 1
                            '65280':
                              type: string
                              minLength: 1
                          required:
                            - '300'
                            - '24603'
                            - '24604'
                            - '24747'
                            - '24864'
                            - '24884'
                            - '65280'
                      required:
                        - protocol
                        - bind_generic_function
                        - spec_files
                  required:
                    - '29180'
                service_discovery:
                  type: object
                  properties:
                    enable:
                      type: boolean
                    protocol:
                      type: string
                      minLength: 1
                    multicast_ip:
                      type: string
                      minLength: 1
                    multicast_port:
                      type: number
                    initial_delay_min:
                      type: number
                    initial_delay_max:
                      type: number
                    ttl:
                      type: number
                  required:
                    - enable
                    - protocol
                    - multicast_ip
                    - multicast_port
                    - initial_delay_min
                    - initial_delay_max
                    - ttl
              required:
                - id
                - name
                - version
                - phy_id
                - vlan
                - role
                - server_ip
                - server_mask
                - client_ip
                - client_mask
                - client_id
                - protocol_version
                - interface_version
                - applications
                - service_discovery
              x-examples:
                example-1:
                  id: 1
                  name: someip-server
                  version: 1.0.0
                  phy_id: 104
                  vlan: 4
                  role: server
                  server_ip: 'fd53:7cb8:0383:0004:0000:0000:0000:0067'
                  server_mask: 64
                  client_ip: 'fd53:7cb8:0383:0004:0000:0000:0000:0001'
                  client_mask: 64
                  client_id: 1
                  protocol_version: 1
                  interface_version: 1
                  applications:
                    '29180':
                      protocol: tcp
                      bind_generic_function: false
                      spec_files:
                        '300': /fibex/0x12C_NetworkAccessService-v3.0.0E.json
                        '24603': /autosar/Service_Positioning.json
                        '24604': /autosar/Service_GNSS.json
                        '24747': /fibex/0x60AB_Service_V2XMessage-ID-REF-Fix-Typo-Fix-FIELD-LENGTH-Fix.json
                        '24864': /fibex/0x6120_Service_BluetoothPhone_v3_3F.json
                        '24884': /fibex/0x6134_OSDRegistration_V1.2.3F.json
                        '65280': /fibex/0xFF00_TestabilityService_V2.0.0F_CBox.json
                  service_discovery:
                    enable: true
                    protocol: udp
                    multicast_ip: 224.224.224.245
                    multicast_port: 30490
                    initial_delay_min: 10
                    initial_delay_max: 100
                    ttl: 3
            examples:
              sever:
                value:
                  id: 1
                  name: someip-server
                  version: 1.0.0
                  phy_id: 104
                  vlan: 4
                  role: server
                  server_ip: 'fd53:7cb8:0383:0004:0000:0000:0000:0067'
                  server_mask: 64
                  client_ip: 'fd53:7cb8:0383:0004:0000:0000:0000:0001'
                  client_mask: 64
                  client_id: 1
                  protocol_version: 1
                  interface_version: 1
                  applications:
                    '29180':
                      protocol: tcp
                      bind_generic_function: false
                      spec_files:
                        '300': /fibex/0x12C_NetworkAccessService-v3.0.0E.json
                        '24603': /autosar/Service_Positioning.json
                        '24604': /autosar/Service_GNSS.json
                        '24747': /fibex/0x60AB_Service_V2XMessage-ID-REF-Fix-Typo-Fix-FIELD-LENGTH-Fix.json
                        '24864': /fibex/0x6120_Service_BluetoothPhone_v3_3F.json
                        '24884': /fibex/0x6134_OSDRegistration_V1.2.3F.json
                        '65280': /fibex/0xFF00_TestabilityService_V2.0.0F_CBox.json
                  service_discovery:
                    enable: true
                    protocol: udp
                    multicast_ip: 224.224.224.245
                    multicast_port: 30490
                    initial_delay_min: 10
                    initial_delay_max: 100
                    ttl: 3
              client:
                value:
                  id: 2
                  name: someip-client
                  version: 1.0.0
                  phy_id: 104
                  vlan: 4
                  role: client
                  server_ip: 'fd53:7cb8:0383:0004:0000:0000:0000:0067'
                  server_mask: 64
                  client_ip: 'fd53:7cb8:0383:0004:0000:0000:0000:0001'
                  client_mask: 64
                  client_id: 1
                  protocol_version: 1
                  interface_version: 1
                  bind_generic_function: false
                  applications:
                    '29180':
                      protocol: tcp
                      bind_generic_function: false
                      spec_files:
                        '300': /fibex/0x12C_NetworkAccessService-v3.0.0E.json
                        '24603': /autosar/Service_Positioning.json
                        '24604': /autosar/Service_GNSS.json
                        '24747': /fibex/0x60AB_Service_V2XMessage-ID-REF-Fix-Typo-Fix-FIELD-LENGTH-Fix.json
                        '24864': /fibex/0x6120_Service_BluetoothPhone_v3_3F.json
                        '24884': /fibex/0x6134_OSDRegistration_V1.2.3F.json
                        '65280': /fibex/0xFF00_TestabilityService_V2.0.0F_CBox.json
                  service_discovery:
                    enable: true
                    protocol: udp
                    multicast_ip: 224.224.224.245
                    multicast_port: 30490
                    initial_delay_min: 10
                    initial_delay_max: 100
                    ttl: 3
        description: ''
    delete:
      summary: Delete all  the instances
      operationId: delete-instance
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delete'
              examples:
                example-1:
                  value:
                    code: 200
                    message: delete all instances successed.
      description: ''
  '/instance/{id}/start':
    parameters:
      - schema:
          type: string
          example: someip-server_1.0.0_1
        name: id
        in: path
        description: here man can whrite 'someip-server_1.0.0_1' or 'someip-client_1.0.0_2'
        required: true
    post:
      summary: Start  someip server/client  instance
      operationId: post-instance-id-start
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 200
                    message: 'start instance(id:someip-server_1.0.0_1) successed.'
              examples:
                example-1:
                  value:
                    code: 200
                    message: 'start instance(id:someip-server_1.0.0_1) successed.'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 400
                    message: 'instance(id:id) does not exist.'
              examples:
                example-1:
                  value:
                    code: 400
                    message: 'instance(id:server_ins_id) does not exist.'
      description: ''
  '/instance/{id}/stop':
    parameters:
      - schema:
          type: string
          example: someip-server_1.0.0_1
        name: id
        in: path
        required: true
        description: here man can whrite 'someip-server_1.0.0_1' or 'someip-client_1.0.0_2'
    post:
      summary: Stop someip server/client instance
      operationId: post-instance-id-stop
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 200
                    message: 'stop instance(id:someip-server_1.0.0_1) successed.'
              examples:
                example-1:
                  value:
                    code: 200
                    message: 'stop instance(id:someip-server_1.0.0_1) successed.'
      description: ''
  '/instance/{id}/discovery/start':
    parameters:
      - schema:
          type: string
          example: someip-server_1.0.0_1
        name: id
        in: path
        required: true
        description: here man can whrite 'someip-server_1.0.0_1' or 'someip-client_1.0.0_2'
    post:
      summary: Start the someip server/client discovery of instance
      operationId: post-instance-id-discovery-start
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 200
                    message: 'start discovery(id:someip-server_1.0.0_1) successed.'
              examples:
                example-1:
                  value:
                    code: 200
                    message: 'start discovery(id:someip-server_1.0.0_1) successed.'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 400
                    message: 'instance(id:1212) does not exist.'
              examples:
                example-1:
                  value:
                    code: 400
                    message: 'instance(id:1212) does not exist.'
      description: ''
  '/instance/{id}/discovery/stop':
    parameters:
      - schema:
          type: string
          example: someip-server_1.0.0_1
        name: id
        in: path
        required: true
        description: here man can whrite 'someip-server_1.0.0_1' or 'someip-client_1.0.0_2'
    post:
      summary: Stop the someip server/client discovery of instance
      operationId: post-instance-id-discovery-stop
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 200
                    message: 'stop discovery(id:someip-server_1.0.0_1) successed.'
              examples:
                example-1:
                  value:
                    code: 200
                    message: 'stop discovery(id:someip-server_1.0.0_1) successed.'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 400
                    message: 'instance(id:123) does not exist.'
              examples:
                example-1:
                  value:
                    code: 400
                    message: 'instance(id:123) does not exist.'
      description: ''
  '/instance/{id}/{appPort}/{serviceId}/{methodId}/{direction}/payload':
    parameters:
      - schema:
          type: string
          example: someip-server_1.0.0_1
        name: id
        in: path
        required: true
        description: here man can whrite 'someip-server_1.0.0_1' or 'someip-client_1.0.0_2'
      - schema:
          type: string
          example: '29180'
        name: appPort
        in: path
        required: true
      - schema:
          type: string
          example: '65280'
        name: serviceId
        in: path
        required: true
      - schema:
          type: string
          example: '1'
        name: methodId
        in: path
        required: true
      - schema:
          type: string
          example: return
        name: direction
        in: path
        required: true
        description: '''input''  or ''return'''
    get:
      summary: Get the payload of someip server/client service
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                  data:
                    type: object
                    properties:
                      version:
                        type: string
                    required:
                      - version
                required:
                  - code
                  - message
                  - data
                x-examples:
                  example-1:
                    code: 200
                    message: get parameters payload successed.
                    data:
                      version: ''
              examples:
                example-1:
                  value:
                    code: 200
                    message: get parameters payload successed.
                    data:
                      outUINT16: 6
                      outUINT32: 5
                      "{\n  \"outUINT16\": 0,\n  \"outUINT32\": 0\n}": ''
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 400
                    message: 'instance(id:id) does not exist.'
              examples:
                example-1:
                  value:
                    code: 400
                    message: 'instance(id:id) does not exist.'
      operationId: get-instance-id-appPort-serviceId-methodId-direction-payload
      description: ''
    post:
      summary: Set the payload of someip server/client  service
      operationId: post-instance-id-appPort-serviceId-methodId-direction-payload
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                  data:
                    type: object
                    properties:
                      outUINT16:
                        type: number
                      outUINT32:
                        type: number
                      "{\n  \"outUINT16\": 0,\n  \"outUINT32\": 0\n}":
                        type: string
                    required:
                      - outUINT16
                      - outUINT32
                      - |-
                        {
                          "outUINT16": 0,
                          "outUINT32": 0
                        }
                required:
                  - code
                  - message
                  - data
                x-examples:
                  example-1:
                    code: 200
                    message: get parameters payload successed.
                    data:
                      outUINT16: 6
                      outUINT32: 5
                      "{\n  \"outUINT16\": 0,\n  \"outUINT32\": 0\n}": ''
              examples:
                example-1:
                  value:
                    code: 200
                    message: get parameters payload successed.
                    data:
                      outUINT16: 6
                      outUINT32: 5
                      "{\n  \"outUINT16\": 0,\n  \"outUINT32\": 0\n}": ''
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 400
                    message: 'instance(id:id) does not exist.'
              examples:
                example-1:
                  value:
                    code: 400
                    message: 'instance(id:id) does not exist.'
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                outUINT16:
                  type: number
                outUINT32:
                  type: number
              required:
                - outUINT16
                - outUINT32
              x-examples:
                example-1:
                  outUINT16: 1
                  outUINT32: 2
            examples:
              example-1:
                value:
                  outUINT16: 5
                  outUINT32: 6
  '/instance/{id}/{appPort}/rule':
    parameters:
      - schema:
          type: string
          example: someip-server_1.0.0_1
        name: id
        in: path
        required: true
        description: here man can whrite 'someip-server_1.0.0_1' or 'someip-client_1.0.0_2'
      - schema:
          type: string
          example: '29180'
        name: appPort
        in: path
        required: true
    get:
      summary: Get Callback to the simulation instance
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                  data:
                    type: object
                    properties:
                      beforeDecode:
                        type: array
                        items:
                          required: []
                          properties: {}
                      afterDecode:
                        type: array
                        items:
                          required: []
                          properties: {}
                      beforeEncode:
                        type: array
                        items:
                          required: []
                          properties: {}
                      afterEncode:
                        type: array
                        items:
                          required: []
                          properties: {}
                    required:
                      - beforeDecode
                      - afterDecode
                      - beforeEncode
                      - afterEncode
                required:
                  - code
                  - message
                  - data
                x-examples:
                  example-1:
                    code: 200
                    message: get rule successed.
                    data:
                      beforeDecode: []
                      afterDecode: []
                      beforeEncode: []
                      afterEncode: []
              examples:
                example-1:
                  value:
                    code: 200
                    message: get rule successed.
                    data:
                      beforeDecode: []
                      afterDecode:
                        - '25365'
                        - '72855'
                        - '88490'
                        - '99463'
                      beforeEncode: []
                      afterEncode: []
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 400
                    message: 'instance(id:id) does not exist.'
              examples:
                example-1:
                  value:
                    code: 400
                    message: 'instance(id:id) does not exist.'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 500
                    message: get rule failed.
              examples:
                example-1:
                  value:
                    code: 500
                    message: get rule failed.
      operationId: get-instance-id-appPort-serviceId-rule
      description: ''
    post:
      summary: Add Callback to the simulation instance
      operationId: post-instance-id-appPort-serviceId-rule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                  data:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                  - data
                x-examples:
                  example-1:
                    code: 200
                    message: add rule successed.
                    data: '50810'
              examples:
                example-1:
                  value:
                    code: 200
                    message: add rule successed.
                    data: '36203'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                type:
                  type: string
                  minLength: 1
                condition:
                  type: string
                  minLength: 1
                todo:
                  type: string
                  minLength: 1
              required:
                - type
                - condition
                - todo
              x-examples:
                example-1:
                  type: afterDecode
                  condition: '[Function: condition]'
                  todo: '[Function: todo]'
            examples:
              example-1:
                value:
                  type: afterDecode
                  condition: "(channel, message, service, handler) => {\r\n            console.log('condition func(channel)', JSON.stringify(channel));\r\n            console.log('condition func(message)', JSON.stringify(message));\r\n            // console.log('condition func(service)', JSON.stringify(service));\r\n            return true;\r\n        }"
                  todo: "(channel, message, service, handler) => {\r\n            console.log('todo func(channel)', JSON.stringify(channel));\r\n            console.log('todo func(message)', JSON.stringify(message));\r\n            // console.log('todo func(service)', JSON.stringify(service));\r\n            const pdu = message.data;\r\n            handler.send(pdu);\r\n        }"
          application/xml:
            schema:
              description: ''
              type: object
              properties:
                type:
                  type: string
                  minLength: 1
                condition:
                  type: string
                  minLength: 1
                todo:
                  type: string
                  minLength: 1
              required:
                - type
                - condition
                - todo
              x-examples:
                example-1:
                  type: afterDecode
                  condition: '(sourceChannel, message, service) => {const { header } = message;const methodId = header.messageId.methodId;console.log(''hello condition func => methodId:'', header.messageId);return methodId % 2 === 0;}'
                  todo: '(sourceChannel, message, service) => {console.log(''hello rule function !!!'');}'
            examples:
              example-1:
                value: |-
                  {"type":"afterDecode",
                  "condition": "(sourceChannel, message, service) => {const { header } = message;const methodId = header.messageId.methodId;console.log('hello condition func => methodId:', header.messageId);return methodId % 2 === 0;}",
                  "todo": "(sourceChannel, message, service) => {console.log('hello rule function !!!');}"
                  }
        description: ''
      description: ''
    delete:
      summary: Delete Callback to the simulation instance
      operationId: delete-instance-id-appPort-serviceId-rule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                  data:
                    type: boolean
                required:
                  - code
                  - message
                  - data
                x-examples:
                  example-1:
                    code: 200
                    message: delete rule successed.
                    data: true
              examples:
                example-1:
                  value:
                    code: 200
                    message: delete rule successed.
                    data: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 400
                    message: delete rule failed.
              examples:
                example-1:
                  value:
                    code: 400
                    message: delete rule failed.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                type:
                  type: string
                  minLength: 1
                funcId:
                  type: string
                  minLength: 1
              required:
                - type
                - funcId
              x-examples:
                example-1:
                  type: afterDecode
                  funcId: '(sourceChannel, message, service) => {console.log(''hello rule function !!!'');}'
            examples:
              example-1:
                value:
                  type: afterDecode
                  funcId: '(sourceChannel, message, service) => {console.log(''hello rule function !!!'');}'
  /instance/header/encode:
    post:
      summary: Encode someip header by object
      operationId: post-instance-header-encode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        minLength: 1
                      data:
                        type: array
                        items:
                          required: []
                          properties: {}
                    required:
                      - type
                      - data
                required:
                  - code
                  - message
                  - data
                x-examples:
                  example-1:
                    code: 200
                    message: encode header successed.
                    data:
                      type: Buffer
                      data:
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
              examples:
                example-1:
                  value:
                    code: 200
                    message: encode header successed.
                    data:
                      type: Buffer
                      data:
                        - 255
                        - 0
                        - 0
                        - 1
                        - 0
                        - 0
                        - 0
                        - 14
                        - 0
                        - 1
                        - 0
                        - 1
                        - 1
                        - 1
                        - 0
                        - 0
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 500
                    message: encode header failed.
              examples:
                example-1:
                  value:
                    code: 500
                    message: encode header failed.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                messageId:
                  type: object
                  properties:
                    serviceId:
                      type: number
                    methodId:
                      type: number
                  required:
                    - serviceId
                    - methodId
                length:
                  type: number
                requestId:
                  type: object
                  properties:
                    clientId:
                      type: number
                    sessionId:
                      type: number
                  required:
                    - clientId
                    - sessionId
                protocolVersion:
                  type: number
                interfaceVersion:
                  type: number
                messageType:
                  type: number
                returnCode:
                  type: number
              required:
                - messageId
                - length
                - requestId
                - protocolVersion
                - interfaceVersion
                - messageType
                - returnCode
              x-examples:
                example-1:
                  messageId:
                    serviceId: 300
                    methodId: 1
                  length: 9
                  requestId:
                    clientId: 1
                    sessionId: 1
                  protocolVersion: 1
                  interfaceVersion: 1
                  messageType: 0
                  returnCode: 0
            examples:
              example-1:
                value:
                  messageId:
                    serviceId: 65280
                    methodId: 1
                  length: 14
                  requestId:
                    clientId: 1
                    sessionId: 1
                  protocolVersion: 1
                  interfaceVersion: 1
                  messageType: 0
                  returnCode: 0
  '/instance/{id}/{appPort}/header/encode':
    parameters:
      - schema:
          type: string
          example: someip-server_1.0.0_1
        name: id
        in: path
        required: true
        description: here man can whrite 'someip-server_1.0.0_1' or 'someip-client_1.0.0_2'
      - schema:
          type: string
          example: '29180'
        name: appPort
        in: path
        required: true
    post:
      summary: Encode someip server/client  header by parameter
      operationId: post-instance-id-appPort-header-encode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        minLength: 1
                      data:
                        type: array
                        items:
                          required: []
                          properties: {}
                    required:
                      - type
                      - data
                required:
                  - code
                  - message
                  - data
                x-examples:
                  example-1:
                    code: 200
                    message: encode header successed.
                    data:
                      type: Buffer
                      data:
                        - 1
                        - 44
                        - 0
                        - 1
                        - 0
                        - 0
                        - 0
                        - 9
                        - 0
                        - 1
                        - 0
                        - 2
                        - 1
                        - 1
                        - 0
                        - 0
              examples:
                example-1:
                  value:
                    code: 200
                    message: encode header successed.
                    data:
                      type: Buffer
                      data:
                        - 255
                        - 0
                        - 0
                        - 1
                        - 0
                        - 0
                        - 0
                        - 14
                        - 0
                        - 1
                        - 0
                        - 1
                        - 1
                        - 1
                        - 2
                        - 0
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                messageId:
                  type: object
                  properties:
                    serviceId:
                      type: number
                    methodId:
                      type: number
                  required:
                    - serviceId
                    - methodId
                length:
                  type: number
                messageType:
                  type: number
              required:
                - messageId
                - length
                - messageType
              x-examples:
                example-1:
                  messageId:
                    serviceId: 300
                    methodId: 1
                  length: 9
                  messageType: 0
            examples:
              example-1:
                value:
                  messageId:
                    serviceId: 65280
                    methodId: 1
                  length: 14
                  messageType: 2
        description: ''
  '/instance/{id}/{appPort}/{serviceId}/{methodId}/{direction}/payload/encode':
    parameters:
      - schema:
          type: string
          example: someip-server_1.0.0_1
        name: id
        in: path
        required: true
        description: here man can whrite 'someip-server_1.0.0_1' or 'someip-client_1.0.0_2'
      - schema:
          type: string
          example: '29180'
        name: appPort
        in: path
        required: true
      - schema:
          type: string
          example: '65280'
        name: serviceId
        in: path
        required: true
      - schema:
          type: string
          example: '1'
        name: methodId
        in: path
        required: true
      - schema:
          type: string
          example: return
        name: direction
        in: path
        required: true
        description: '''input''  or ''return'''
    post:
      summary: Encode the server/client  payload object
      operationId: post-instance-id-appPort-serviceId-methodId-direction-payload-encode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        minLength: 1
                      data:
                        type: array
                        items:
                          required: []
                          properties: {}
                    required:
                      - type
                      - data
                required:
                  - code
                  - message
                  - data
                x-examples:
                  example-1:
                    code: 200
                    message: encode payload successed.
                    data:
                      type: Buffer
                      data:
                        - 0
                        - 5
                        - 53
                        - 46
                        - 50
                        - 46
                        - 48
              examples:
                example-1:
                  value:
                    code: 200
                    message: encode payload successed.
                    data:
                      type: Buffer
                      data:
                        - 0
                        - 5
                        - 53
                        - 46
                        - 50
                        - 46
                        - 48
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 400
                    message: 'instance(id:id) does not exist.'
              examples:
                example-1:
                  value:
                    code: 400
                    message: 'instance(id:id) does not exist.'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                payload:
                  type: object
                  properties:
                    outUINT16:
                      type: number
                    outUINT32:
                      type: number
                  required:
                    - outUINT16
                    - outUINT32
              required:
                - payload
              x-examples:
                example-1:
                  payload:
                    outUINT16: 1
                    outUINT32: 2
            examples:
              example-1:
                value:
                  payload:
                    outUINT16: 1
                    outUINT32: 2
  '/instance/{id}/{appPort}/{serviceId}/{methodId}/{direction}/payload/decode':
    parameters:
      - schema:
          type: string
          example: someip-server_1.0.0_1
        name: id
        in: path
        required: true
        description: here man can whrite 'someip-server_1.0.0_1' or 'someip-client_1.0.0_2'
      - schema:
          type: string
          example: '29180'
        name: appPort
        in: path
        required: true
      - schema:
          type: string
          example: '65280'
        name: serviceId
        in: path
        required: true
      - schema:
          type: string
          example: '1'
        name: methodId
        in: path
        required: true
      - schema:
          type: string
          example: return
        name: direction
        in: path
        required: true
        description: '''input''  or ''return'''
    post:
      summary: Decode the  server/client payload buffer
      operationId: post-instance-id-appPort-serviceId-methodId-direction-payload-decode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                  data:
                    type: object
                    properties:
                      outUINT16:
                        type: number
                      outUINT32:
                        type: number
                    required:
                      - outUINT16
                      - outUINT32
                required:
                  - code
                  - message
                  - data
                x-examples:
                  example-1:
                    code: 200
                    message: decode payload successed.
                    data:
                      outUINT16: 1
                      outUINT32: 2
              examples:
                example-1:
                  value:
                    code: 200
                    message: decode payload successed.
                    data:
                      outUINT16: 1
                      outUINT32: 2
            application/xml:
              schema:
                type: object
                properties: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 400
                    message: 'instance(id:id) does not exist.'
              examples:
                example-1:
                  value:
                    code: 400
                    message: 'instance(id:id) does not exist.'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                payload:
                  type: object
                  properties:
                    type:
                      type: string
                      minLength: 1
                    data:
                      type: array
                      items:
                        required: []
                        properties: {}
                  required:
                    - type
                    - data
              required:
                - payload
              x-examples:
                example-1:
                  payload:
                    type: Buffer
                    data:
                      - 0
                      - 1
                      - 0
                      - 0
                      - 0
                      - 2
            examples:
              example-1:
                value:
                  payload:
                    type: Buffer
                    data:
                      - 0
                      - 1
                      - 0
                      - 0
                      - 0
                      - 2
  '/instance/{id}/{appPort}/{direction}/pdu/encode':
    parameters:
      - schema:
          type: string
          example: someip-server_1.0.0_1
        name: id
        in: path
        required: true
        description: here man can whrite 'someip-server_1.0.0_1' or 'someip-client_1.0.0_2'
      - schema:
          type: string
          example: '29180'
        name: appPort
        in: path
        required: true
      - schema:
          type: string
          example: return
        name: direction
        in: path
        required: true
        description: '''input''  or ''return'''
    post:
      summary: Encode server/client  PDU (header+payload) object
      operationId: post-instance-id-appPort-direction-pdu-encode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        minLength: 1
                      data:
                        type: array
                        items:
                          required: []
                          properties: {}
                    required:
                      - type
                      - data
                required:
                  - code
                  - message
                  - data
                x-examples:
                  example-1:
                    code: 200
                    message: encode pdu successed.
                    data:
                      type: Buffer
                      data:
                        - 255
                        - 0
                        - 0
                        - 1
                        - 0
                        - 0
                        - 0
                        - 14
                        - 0
                        - 1
                        - 0
                        - 1
                        - 1
                        - 1
                        - 2
                        - 0
                        - 0
                        - 1
                        - 0
                        - 0
                        - 0
                        - 2
              examples:
                example-1:
                  value:
                    code: 200
                    message: encode pdu successed.
                    data:
                      type: Buffer
                      data:
                        - 255
                        - 0
                        - 0
                        - 1
                        - 0
                        - 0
                        - 0
                        - 14
                        - 0
                        - 1
                        - 0
                        - 1
                        - 1
                        - 1
                        - 2
                        - 0
                        - 0
                        - 1
                        - 0
                        - 0
                        - 0
                        - 2
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 400
                    message: 'instance(id:id) does not exist.'
              examples:
                example-1:
                  value:
                    code: 400
                    message: 'instance(id:id) does not exist.'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                pdu:
                  type: object
                  properties:
                    header:
                      type: object
                      properties:
                        messageId:
                          type: object
                          properties:
                            serviceId:
                              type: number
                            methodId:
                              type: number
                          required:
                            - serviceId
                            - methodId
                        length:
                          type: number
                        requestId:
                          type: object
                          properties:
                            clientId:
                              type: number
                            sessionId:
                              type: number
                          required:
                            - clientId
                            - sessionId
                        protocolVersion:
                          type: number
                        interfaceVersion:
                          type: number
                        messageType:
                          type: number
                        returnCode:
                          type: number
                      required:
                        - messageId
                        - length
                        - requestId
                        - protocolVersion
                        - interfaceVersion
                        - messageType
                        - returnCode
                    payload:
                      type: object
                      properties:
                        outUINT16:
                          type: number
                        outUINT32:
                          type: number
                      required:
                        - outUINT16
                        - outUINT32
                  required:
                    - header
                    - payload
              required:
                - pdu
              x-examples:
                example-1:
                  pdu:
                    header:
                      messageId:
                        serviceId: 65280
                        methodId: 1
                      length: 14
                      requestId:
                        clientId: 1
                        sessionId: 1
                      protocolVersion: 1
                      interfaceVersion: 1
                      messageType: 2
                      returnCode: 0
                    payload:
                      outUINT16: 1
                      outUINT32: 2
            examples:
              example-1:
                value:
                  pdu:
                    header:
                      messageId:
                        serviceId: 65280
                        methodId: 1
                      length: 14
                      requestId:
                        clientId: 1
                        sessionId: 1
                      protocolVersion: 1
                      interfaceVersion: 1
                      messageType: 2
                      returnCode: 0
                    payload:
                      outUINT16: 1
                      outUINT32: 2
  '/instance/{id}/{appPort}/{direction}/pdu/decode':
    parameters:
      - schema:
          type: string
          example: someip-server_1.0.0_1
        name: id
        in: path
        required: true
        description: here man can whrite 'someip-server_1.0.0_1' or 'someip-client_1.0.0_2'
      - schema:
          type: string
          example: '29180'
        name: appPort
        in: path
        required: true
      - schema:
          type: string
          example: return
        name: direction
        in: path
        required: true
        description: '''input''  or ''return'''
    post:
      summary: Decode  server/client  PDU (header+payload) buffer
      operationId: post-instance-id-appPort-direction-pdu-decode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                  data:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          messageId:
                            type: object
                            properties:
                              serviceId:
                                type: number
                              methodId:
                                type: number
                            required:
                              - serviceId
                              - methodId
                          length:
                            type: number
                          requestId:
                            type: object
                            properties:
                              clientId:
                                type: number
                              sessionId:
                                type: number
                            required:
                              - clientId
                              - sessionId
                          protocolVersion:
                            type: number
                          interfaceVersion:
                            type: number
                          messageType:
                            type: number
                          returnCode:
                            type: number
                        required:
                          - messageId
                          - length
                          - requestId
                          - protocolVersion
                          - interfaceVersion
                          - messageType
                          - returnCode
                      payload:
                        type: object
                        properties:
                          outUINT16:
                            type: number
                          outUINT32:
                            type: number
                        required:
                          - outUINT16
                          - outUINT32
                    required:
                      - header
                      - payload
                required:
                  - code
                  - message
                  - data
                x-examples:
                  example-1:
                    code: 200
                    message: decode payload successed.
                    data:
                      header:
                        messageId:
                          serviceId: 65280
                          methodId: 1
                        length: 14
                        requestId:
                          clientId: 1
                          sessionId: 1
                        protocolVersion: 1
                        interfaceVersion: 1
                        messageType: 2
                        returnCode: 0
                      payload:
                        outUINT16: 1
                        outUINT32: 2
              examples:
                example-1:
                  value:
                    code: 200
                    message: decode payload successed.
                    data:
                      header:
                        messageId:
                          serviceId: 65280
                          methodId: 1
                        length: 14
                        requestId:
                          clientId: 1
                          sessionId: 1
                        protocolVersion: 1
                        interfaceVersion: 1
                        messageType: 2
                        returnCode: 0
                      payload:
                        outUINT16: 1
                        outUINT32: 2
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 400
                    message: 'instance(id:id) does not exist.'
              examples:
                example-1:
                  value:
                    code: 400
                    message: 'instance(id:id) does not exist.'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                pdu:
                  type: object
                  properties:
                    type:
                      type: string
                      minLength: 1
                    data:
                      type: array
                      items:
                        required: []
                        properties: {}
                  required:
                    - type
                    - data
              required:
                - pdu
              x-examples:
                example-1:
                  pdu:
                    type: Buffer
                    data:
                      - 1
                      - 44
                      - 0
                      - 1
                      - 0
                      - 0
                      - 0
                      - 9
                      - 0
                      - 1
                      - 0
                      - 1
                      - 1
                      - 1
                      - 0
                      - 0
                      - 0
                      - 5
                      - 53
                      - 46
                      - 50
                      - 46
                      - 48
            examples:
              example-1:
                value:
                  pdu:
                    type: Buffer
                    data:
                      - 255
                      - 0
                      - 0
                      - 1
                      - 0
                      - 0
                      - 0
                      - 14
                      - 0
                      - 1
                      - 0
                      - 1
                      - 1
                      - 1
                      - 2
                      - 0
                      - 0
                      - 1
                      - 0
                      - 0
                      - 0
                      - 2
          application/xml:
            schema:
              description: ''
              type: object
              properties:
                type:
                  type: string
                  minLength: 1
                data:
                  type: array
                  items:
                    required: []
                    properties: {}
              required:
                - type
                - data
              x-examples:
                example-1:
                  type: Buffer
                  data:
                    - 1
                    - 44
                    - 0
                    - 1
                    - 0
                    - 0
                    - 0
                    - 9
                    - 0
                    - 1
                    - 0
                    - 1
                    - 1
                    - 1
                    - 0
                    - 0
                    - 0
                    - 5
                    - 53
                    - 46
                    - 50
                    - 46
                    - 48
            examples:
              example-1:
                value: |-
                  {"type": "Buffer",
                        "data": [1, 44, 0, 1, 0, 0, 0, 9, 0, 1, 0, 1, 1, 1, 0, 0, 0, 5, 53, 46, 50, 46, 48]
                      }
        description: ''
  '/instance/{id}/{appPort}/pdu/send':
    parameters:
      - schema:
          type: string
          example: someip-server_1.0.0_1
        name: id
        in: path
        required: true
        description: here man can whrite 'someip-server_1.0.0_1' or 'someip-client_1.0.0_2'
      - schema:
          type: string
          example: '29180'
        name: appPort
        in: path
        required: true
    post:
      summary: Send  server/client  PDU buffer
      operationId: post-instance-id-appPort-pdu-send
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 200
                    message: send pud buffer successed.
              examples:
                example-1:
                  value:
                    code: 200
                    message: send pud buffer successed.
            application/xml:
              schema:
                type: object
                properties: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 400
                    message: 'instance(id:id) does not exist.'
              examples:
                example-1:
                  value:
                    code: 400
                    message: 'instance(id:id) does not exist.'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                pdu:
                  type: object
                  properties:
                    type:
                      type: string
                      minLength: 1
                    data:
                      type: array
                      items:
                        required: []
                        properties: {}
                  required:
                    - type
                    - data
              required:
                - pdu
              x-examples:
                example-1:
                  pdu:
                    type: Buffer
                    data:
                      - 255
                      - 0
                      - 0
                      - 1
                      - 0
                      - 0
                      - 0
                      - 14
                      - 0
                      - 1
                      - 0
                      - 1
                      - 1
                      - 1
                      - 2
                      - 0
                      - 0
                      - 1
                      - 0
                      - 0
                      - 0
                      - 2
            examples:
              example-1:
                value:
                  pdu:
                    type: Buffer
                    data:
                      - 255
                      - 0
                      - 0
                      - 1
                      - 0
                      - 0
                      - 0
                      - 14
                      - 0
                      - 1
                      - 0
                      - 1
                      - 1
                      - 1
                      - 2
                      - 0
                      - 0
                      - 1
                      - 0
                      - 0
                      - 0
                      - 2
  '/instance/{id}/{appPort}/{direction}/pdu/send':
    parameters:
      - schema:
          type: string
          example: someip-server_1.0.0_1
        name: id
        in: path
        required: true
        description: here man can whrite 'someip-server_1.0.0_1' or 'someip-client_1.0.0_2'
      - schema:
          type: string
          example: '29180'
        name: appPort
        in: path
        required: true
      - schema:
          type: string
          example: return
        name: direction
        in: path
        required: true
        description: '''input''  or ''return'''
    post:
      summary: Send server/client  PDU buffer (from PDU object encode)
      operationId: post-instance-id-appPort-direction-pdu-send
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 200
                    message: send pud buffer successed.
              examples:
                example-1:
                  value:
                    code: 200
                    message: send pud buffer successed.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
                x-examples:
                  example-1:
                    code: 400
                    message: 'instance(id:id) does not exist.'
              examples:
                example-1:
                  value:
                    code: 400
                    message: 'instance(id:id) does not exist.'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                pdu:
                  type: object
                  properties:
                    header:
                      type: object
                      properties:
                        messageId:
                          type: object
                          properties:
                            serviceId:
                              type: number
                            methodId:
                              type: number
                          required:
                            - serviceId
                            - methodId
                      required:
                        - messageId
                    payload:
                      type: object
                      properties:
                        outUINT16:
                          type: number
                        outUINT32:
                          type: number
                      required:
                        - outUINT16
                        - outUINT32
                  required:
                    - header
                    - payload
              required:
                - pdu
              x-examples:
                example-1:
                  pdu:
                    header:
                      messageId:
                        serviceId: 65280
                        methodId: 1
                    payload:
                      outUINT16: 1
                      outUINT32: 2
            examples:
              example-1:
                value:
                  pdu:
                    header:
                      messageId:
                        serviceId: 65280
                        methodId: 1
                    payload:
                      outUINT16: 1
                      outUINT32: 2
components:
  schemas:
    NewSomeipSimulationInstance:
      description: ''
      type: object
      properties:
        id:
          type: number
        name:
          type: string
          minLength: 1
        version:
          type: string
          minLength: 1
        phy_id:
          type: number
        vlan:
          type: number
        role:
          type: string
          minLength: 1
        server_ip:
          type: string
          minLength: 1
        server_mask:
          type: number
        client_id:
          type: number
        protocol_version:
          type: number
        interface_version:
          type: number
        bind_generic_function:
          type: boolean
        applications:
          type: object
          properties:
            '29180':
              type: object
              properties:
                protocol:
                  type: string
                  minLength: 1
                services:
                  type: object
                  properties:
                    '300':
                      type: object
                      properties:
                        service_spec:
                          type: string
                          minLength: 1
                      required:
                        - service_spec
                  required:
                    - '300'
              required:
                - protocol
                - services
          required:
            - '29180'
        service_discovery:
          type: object
          properties:
            enable:
              type: string
              minLength: 1
            protocol:
              type: string
              minLength: 1
            multicast_ip:
              type: string
              minLength: 1
            multicast_port:
              type: number
            initial_delay_min:
              type: number
            initial_delay_max:
              type: number
            ttl:
              type: number
          required:
            - enable
            - protocol
            - multicast_ip
            - multicast_port
            - initial_delay_min
            - initial_delay_max
            - ttl
      required:
        - id
        - name
        - version
        - phy_id
        - vlan
        - role
        - server_ip
        - server_mask
        - client_id
        - protocol_version
        - interface_version
        - bind_generic_function
        - applications
        - service_discovery
      x-examples:
        example-1:
          id: 1
          name: someip-server
          version: 1.0.0
          phy_id: 104
          vlan: 4
          role: server
          server_ip: 'fd53:7cb8:0383:0004:0000:0000:0000:0067'
          server_mask: 64
          client_id: 1
          protocol_version: 1
          interface_version: 1
          bind_generic_function: false
          applications:
            '29180':
              protocol: tcp
              services:
                '300':
                  service_spec: 0x12C_NetworkAccessService_V2.3.2F.json
          service_discovery:
            enable: 'true'
            protocol: udp
            multicast_ip: 224.224.224.245
            multicast_port: 30490
            initial_delay_min: 10
            initial_delay_max: 100
            ttl: 3
          value:
            id: 1
            name: someip-server
            version: 1.0.0
            phy_id: 104
            vlan: 4
            role: server
            server_ip: 'fd53:7cb8:0383:0004:0000:0000:0000:0067'
            server_mask: 64
            client_id: 1
            protocol_version: 1
            interface_version: 1
            bind_generic_function: false
            applications:
              '29180':
                protocol: tcp
                services:
                  '300':
                    service_spec: 0x12C_NetworkAccessService_V2.3.2F.json
            service_discovery:
              enable: 'true'
              protocol: udp
              multicast_ip: 224.224.224.245
              multicast_port: 30490
              initial_delay_min: 10
              initial_delay_max: 100
              ttl: 3
    BaseHttpResponse:
      description: ''
      type: object
      properties:
        code:
          type: number
        message:
          type: string
          minLength: 1
        data:
          type: string
          minLength: 1
      required:
        - code
        - message
        - data
      x-examples:
        example-1:
          code: 200
          message: load instances successed.
          data: someip-server_1.0.0_1
          value:
            code: 200
            message: load instances successed.
            data: someip-server_1.0.0_1
    GetNewSomeipResponse:
      description: ''
      type: object
      properties:
        code:
          type: number
        message:
          type: string
          minLength: 1
        data:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            required:
              - id
              - name
              - version
              - phy_id
              - vlan
              - role
              - server_ip
              - server_mask
              - client_ip
              - client_id
              - protocol_version
              - interface_version
              - bind_generic_function
            properties:
              id:
                type: number
              name:
                type: string
              version:
                type: string
              phy_id:
                type: number
              vlan:
                type: number
              role:
                type: string
                minLength: 1
              server_ip:
                type: string
              server_mask:
                type: number
              client_ip:
                type: string
              client_id:
                type: number
              protocol_version:
                type: number
              interface_version:
                type: number
              bind_generic_function:
                type: boolean
              applications:
                type: object
                properties: {}
                required: []
              service_discovery:
                type: object
                properties:
                  enable:
                    type: boolean
                  protocol:
                    type: string
                    minLength: 1
                  multicast_ip:
                    type: string
                  multicast_port:
                    type: number
                  initial_delay_min:
                    type: number
                  initial_delay_max:
                    type: number
                  ttl:
                    type: number
                required:
                  - enable
                  - protocol
                  - multicast_ip
                  - multicast_port
                  - initial_delay_min
                  - initial_delay_max
                  - ttl
      required:
        - code
        - message
        - data
      x-examples:
        example-1:
          code: 200
          message: get all instances successed.
          data:
            - id: 0
              name: ''
              version: ''
              phy_id: 0
              vlan: 0
              role: server
              server_ip: ''
              server_mask: 0
              client_ip: ''
              client_id: 0
              protocol_version: 0
              interface_version: 0
              bind_generic_function: false
              applications: {}
              service_discovery:
                enable: true
                protocol: udp
                multicast_ip: ''
                multicast_port: 0
                initial_delay_min: 10
                initial_delay_max: 100
                ttl: 3
    Delete:
      description: ''
      type: object
      properties:
        code:
          type: number
        message:
          type: string
          minLength: 1
        data:
          type: array
          items:
            required: []
            properties: {}
      required:
        - code
        - message
        - data
      x-examples:
        example-1:
          code: 200
          message: get all instances successed.
          data: []
  responses: {}
